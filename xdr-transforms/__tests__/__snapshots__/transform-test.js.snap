// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.transform(type definitions) 1`] = `
"declare namespace xdr {
    interface SignedInteger {
        readonly MAX_VALUE: 2147483647;
        readonly MIN_VALUE: -2147483648;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    interface UnsignedInteger {
        readonly MAX_VALUE: 4294967295;
        readonly MIN_VALUE: 0;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    class Hyper {
        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: Hyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Hyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Hyper;

        readonly MAX_VALUE: Hyper;

        readonly MIN_VALUE: Hyper;

        static read(io: Buffer): Hyper;

        static write(value: Hyper, io: Buffer): void;

        static fromString(input: string): Hyper;

        static fromBytes(low: number, high: number): Hyper;

        static isValid(value: Hyper): boolean;

    }

    class UnsignedHyper {
        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: UnsignedHyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): UnsignedHyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): UnsignedHyper;

        readonly MAX_VALUE: UnsignedHyper;

        readonly MIN_VALUE: UnsignedHyper;

        static read(io: Buffer): UnsignedHyper;

        static write(value: UnsignedHyper, io: Buffer): void;

        static fromString(input: string): UnsignedHyper;

        static fromBytes(low: number, high: number): UnsignedHyper;

        static isValid(value: UnsignedHyper): boolean;

    }

    const Uint32: UnsignedInteger;

    const Int32: SignedInteger;

    class Uint64 extends Hyper {
    }

    class Int64 extends Hyper {
    }

}"
`;

exports[`.transform(xdr enum) 1`] = `
"declare namespace xdr {
    interface SignedInteger {
        readonly MAX_VALUE: 2147483647;
        readonly MIN_VALUE: -2147483648;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    interface UnsignedInteger {
        readonly MAX_VALUE: 4294967295;
        readonly MIN_VALUE: 0;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    class Hyper {
        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: Hyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Hyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Hyper;

        readonly MAX_VALUE: Hyper;

        readonly MIN_VALUE: Hyper;

        static read(io: Buffer): Hyper;

        static write(value: Hyper, io: Buffer): void;

        static fromString(input: string): Hyper;

        static fromBytes(low: number, high: number): Hyper;

        static isValid(value: Hyper): boolean;

    }

    class UnsignedHyper {
        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: UnsignedHyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): UnsignedHyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): UnsignedHyper;

        readonly MAX_VALUE: UnsignedHyper;

        readonly MIN_VALUE: UnsignedHyper;

        static read(io: Buffer): UnsignedHyper;

        static write(value: UnsignedHyper, io: Buffer): void;

        static fromString(input: string): UnsignedHyper;

        static fromBytes(low: number, high: number): UnsignedHyper;

        static isValid(value: UnsignedHyper): boolean;

    }

    class ChangeTrustResultCode {
        readonly name: \\"changeTrustMalformed\\" | \\"foo\\";

        readonly value: -1 | 1;

        static changeTrustMalformed(): ChangeTrustResultCode;

        static foo(): ChangeTrustResultCode;

    }

}"
`;
