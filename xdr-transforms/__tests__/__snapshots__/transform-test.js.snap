// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.transform(type definitions) 1`] = `
"declare namespace xdr {
    interface SignedInt {
        readonly MAX_VALUE: 2147483647;
        readonly MIN_VALUE: -2147483648;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    interface UnsignedInt {
        readonly MAX_VALUE: 4294967295;
        readonly MIN_VALUE: 0;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    class Hyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: Hyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Hyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Hyper;

        static readonly MAX_VALUE: Hyper;

        static readonly MIN_VALUE: Hyper;

        static read(io: Buffer): Hyper;

        static write(value: Hyper, io: Buffer): void;

        static fromString(input: string): Hyper;

        static fromBytes(low: number, high: number): Hyper;

        static isValid(value: Hyper): boolean;

    }

    class UnsignedHyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: UnsignedHyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): UnsignedHyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): UnsignedHyper;

        static readonly MAX_VALUE: UnsignedHyper;

        static readonly MIN_VALUE: UnsignedHyper;

        static read(io: Buffer): UnsignedHyper;

        static write(value: UnsignedHyper, io: Buffer): void;

        static fromString(input: string): UnsignedHyper;

        static fromBytes(low: number, high: number): UnsignedHyper;

        static isValid(value: UnsignedHyper): boolean;

    }

    class XDRString {
        constructor(maxLength: 4294967295);

        read(io: Buffer): Buffer;

        readString(io: Buffer): string;

        write(value: string | Buffer, io: Buffer): void;

        isValid(value: string | number[] | Buffer): boolean;

        toXDR(value: string | Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class XDRArray {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        }, length: number);

        read(io: Buffer): Buffer;

        write(value: any[], io: Buffer): void;

        isValid(value: any[]): boolean;

        toXDR(value: any[]): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarArray extends XDRArray {
    }

    class Opaque {
        constructor(length: number);

        read(io: Buffer): Buffer;

        write(value: Buffer, io: Buffer): void;

        isValid(value: Buffer): boolean;

        toXDR(value: Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarOpaque extends Opaque {
    }

    class Option {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        });

        read(io: Buffer): any;

        write(value: any, io: Buffer): void;

        isValid(value: any): boolean;

        toXDR(value: any): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): any;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): any;

    }

    type Uint32 = number;

    type Int32 = number;

    type Uint64 = UnsignedHyper;

    type Int64 = Hyper;

    type String32 = string | Buffer;

    type String64 = string | Buffer;

    type Hash = Buffer;

    type EncryptedBody = Buffer;

    type Value = Buffer;

    type LedgerEntryChanges = LedgerEntryChange[];

    type SkipList = Hash[];

    type SequenceNumber = Int64;

    type NodeId = PublicKey;

    type AccountId = PublicKey;

    type ClearFlags = undefined | Uint32;

}"
`;

exports[`.transform(xdr enum) 1`] = `
"declare namespace xdr {
    interface SignedInt {
        readonly MAX_VALUE: 2147483647;
        readonly MIN_VALUE: -2147483648;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    interface UnsignedInt {
        readonly MAX_VALUE: 4294967295;
        readonly MIN_VALUE: 0;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    class Hyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: Hyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Hyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Hyper;

        static readonly MAX_VALUE: Hyper;

        static readonly MIN_VALUE: Hyper;

        static read(io: Buffer): Hyper;

        static write(value: Hyper, io: Buffer): void;

        static fromString(input: string): Hyper;

        static fromBytes(low: number, high: number): Hyper;

        static isValid(value: Hyper): boolean;

    }

    class UnsignedHyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: UnsignedHyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): UnsignedHyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): UnsignedHyper;

        static readonly MAX_VALUE: UnsignedHyper;

        static readonly MIN_VALUE: UnsignedHyper;

        static read(io: Buffer): UnsignedHyper;

        static write(value: UnsignedHyper, io: Buffer): void;

        static fromString(input: string): UnsignedHyper;

        static fromBytes(low: number, high: number): UnsignedHyper;

        static isValid(value: UnsignedHyper): boolean;

    }

    class XDRString {
        constructor(maxLength: 4294967295);

        read(io: Buffer): Buffer;

        readString(io: Buffer): string;

        write(value: string | Buffer, io: Buffer): void;

        isValid(value: string | number[] | Buffer): boolean;

        toXDR(value: string | Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class XDRArray {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        }, length: number);

        read(io: Buffer): Buffer;

        write(value: any[], io: Buffer): void;

        isValid(value: any[]): boolean;

        toXDR(value: any[]): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarArray extends XDRArray {
    }

    class Opaque {
        constructor(length: number);

        read(io: Buffer): Buffer;

        write(value: Buffer, io: Buffer): void;

        isValid(value: Buffer): boolean;

        toXDR(value: Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarOpaque extends Opaque {
    }

    class Option {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        });

        read(io: Buffer): any;

        write(value: any, io: Buffer): void;

        isValid(value: any): boolean;

        toXDR(value: any): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): any;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): any;

    }

    class ChangeTrustResultCode {
        readonly name: \\"changeTrustMalformed\\" | \\"foo\\";

        readonly value: -1 | 1;

        static changeTrustMalformed(): ChangeTrustResultCode;

        static foo(): ChangeTrustResultCode;

    }

}"
`;

exports[`.transform(xdr structs) 1`] = `
"declare namespace xdr {
    interface SignedInt {
        readonly MAX_VALUE: 2147483647;
        readonly MIN_VALUE: -2147483648;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    interface UnsignedInt {
        readonly MAX_VALUE: 4294967295;
        readonly MIN_VALUE: 0;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    class Hyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: Hyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Hyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Hyper;

        static readonly MAX_VALUE: Hyper;

        static readonly MIN_VALUE: Hyper;

        static read(io: Buffer): Hyper;

        static write(value: Hyper, io: Buffer): void;

        static fromString(input: string): Hyper;

        static fromBytes(low: number, high: number): Hyper;

        static isValid(value: Hyper): boolean;

    }

    class UnsignedHyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: UnsignedHyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): UnsignedHyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): UnsignedHyper;

        static readonly MAX_VALUE: UnsignedHyper;

        static readonly MIN_VALUE: UnsignedHyper;

        static read(io: Buffer): UnsignedHyper;

        static write(value: UnsignedHyper, io: Buffer): void;

        static fromString(input: string): UnsignedHyper;

        static fromBytes(low: number, high: number): UnsignedHyper;

        static isValid(value: UnsignedHyper): boolean;

    }

    class XDRString {
        constructor(maxLength: 4294967295);

        read(io: Buffer): Buffer;

        readString(io: Buffer): string;

        write(value: string | Buffer, io: Buffer): void;

        isValid(value: string | number[] | Buffer): boolean;

        toXDR(value: string | Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class XDRArray {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        }, length: number);

        read(io: Buffer): Buffer;

        write(value: any[], io: Buffer): void;

        isValid(value: any[]): boolean;

        toXDR(value: any[]): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarArray extends XDRArray {
    }

    class Opaque {
        constructor(length: number);

        read(io: Buffer): Buffer;

        write(value: Buffer, io: Buffer): void;

        isValid(value: Buffer): boolean;

        toXDR(value: Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarOpaque extends Opaque {
    }

    class Option {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        });

        read(io: Buffer): any;

        write(value: any, io: Buffer): void;

        isValid(value: any): boolean;

        toXDR(value: any): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): any;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): any;

    }

    type Uint32 = number;

    class ErrorCode {
        readonly name: \\"errMisc\\" | \\"errDatum\\" | \\"errConf\\" | \\"errAuth\\" | \\"errLoad\\";

        readonly value: 0 | 1 | 2 | 3 | 4;

        static errMisc(): ErrorCode;

        static errDatum(): ErrorCode;

        static errConf(): ErrorCode;

        static errAuth(): ErrorCode;

        static errLoad(): ErrorCode;

    }

    type ErrorMsg = string | Buffer;

    class Error {
        constructor(attributes: {
            code: ErrorCode;
            msg: ErrorMsg;
            extra: string | Buffer;
            int32: number;
            uint32: number;
            int64: UnsignedHyper;
            int64: Hyper;
            string32: string | Buffer;
            hash: Buffer;
            encryptedBody: Buffer;
            value: Buffer;
            ledgerEntryChanges: LedgerEntryChange[];
            accountEntries: LedgerEntryChange[];
            ClearFlags: null | Uint32;
        });

        code(value?: ErrorCode): ErrorCode;

        msg(value?: ErrorMsg): ErrorMsg;

        extra(value?: string | Buffer): string | Buffer;

        int32(value?: number): number;

        uint32(value?: number): number;

        int64(value?: UnsignedHyper): UnsignedHyper;

        int64(value?: Hyper): Hyper;

        string32(value?: string | Buffer): string | Buffer;

        hash(value?: Buffer): Buffer;

        encryptedBody(value?: Buffer): Buffer;

        value(value?: Buffer): Buffer;

        ledgerEntryChanges(value?: LedgerEntryChange[]): LedgerEntryChange[];

        accountEntries(value?: LedgerEntryChange[]): LedgerEntryChange[];

        ClearFlags(value?: null | Uint32): null | Uint32;

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static read(io: Buffer): Error;

        static write(value: Error, io: Buffer): void;

        static isValid(value: Error): boolean;

        static toXDR(value: Error): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Error;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Error;

    }

}"
`;

exports[`.transform(xdr unions) 1`] = `
"declare namespace xdr {
    interface SignedInt {
        readonly MAX_VALUE: 2147483647;
        readonly MIN_VALUE: -2147483648;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    interface UnsignedInt {
        readonly MAX_VALUE: 4294967295;
        readonly MIN_VALUE: 0;
        read(io: Buffer): number;
        write(value: number, io: Buffer): void;
        isValid(value: number): boolean;
        toXDR(value: number): Buffer;
        fromXDR(input: Buffer, format?: \\"raw\\"): number;
        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): number;
    }

    class Hyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: Hyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Hyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Hyper;

        static readonly MAX_VALUE: Hyper;

        static readonly MIN_VALUE: Hyper;

        static read(io: Buffer): Hyper;

        static write(value: Hyper, io: Buffer): void;

        static fromString(input: string): Hyper;

        static fromBytes(low: number, high: number): Hyper;

        static isValid(value: Hyper): boolean;

    }

    class UnsignedHyper {
        low: number;

        high: number;

        unsigned: boolean;

        constructor(low: number, high: number);

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static toXDR(value: UnsignedHyper): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): UnsignedHyper;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): UnsignedHyper;

        static readonly MAX_VALUE: UnsignedHyper;

        static readonly MIN_VALUE: UnsignedHyper;

        static read(io: Buffer): UnsignedHyper;

        static write(value: UnsignedHyper, io: Buffer): void;

        static fromString(input: string): UnsignedHyper;

        static fromBytes(low: number, high: number): UnsignedHyper;

        static isValid(value: UnsignedHyper): boolean;

    }

    class XDRString {
        constructor(maxLength: 4294967295);

        read(io: Buffer): Buffer;

        readString(io: Buffer): string;

        write(value: string | Buffer, io: Buffer): void;

        isValid(value: string | number[] | Buffer): boolean;

        toXDR(value: string | Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class XDRArray {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        }, length: number);

        read(io: Buffer): Buffer;

        write(value: any[], io: Buffer): void;

        isValid(value: any[]): boolean;

        toXDR(value: any[]): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarArray extends XDRArray {
    }

    class Opaque {
        constructor(length: number);

        read(io: Buffer): Buffer;

        write(value: Buffer, io: Buffer): void;

        isValid(value: Buffer): boolean;

        toXDR(value: Buffer): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): Buffer;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Buffer;

    }

    class VarOpaque extends Opaque {
    }

    class Option {
        constructor(childType: {
            read(io: any): any;
            write(value: any, io: Buffer): void;
            isValid(value: any): boolean;
        });

        read(io: Buffer): any;

        write(value: any, io: Buffer): void;

        isValid(value: any): boolean;

        toXDR(value: any): Buffer;

        fromXDR(input: Buffer, format?: \\"raw\\"): any;

        fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): any;

    }

    class ErrorCode {
        readonly name: \\"errMisc\\" | \\"errDatum\\" | \\"errConf\\" | \\"errAuth\\" | \\"errLoad\\";

        readonly value: 0 | 1 | 2 | 3 | 4;

        static errMisc(): ErrorCode;

        static errDatum(): ErrorCode;

        static errConf(): ErrorCode;

        static errAuth(): ErrorCode;

        static errLoad(): ErrorCode;

    }

    class Error {
        constructor(attributes: {
            code: ErrorCode;
            msg: string | Buffer;
        });

        code(value?: ErrorCode): ErrorCode;

        msg(value?: string | Buffer): string | Buffer;

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static read(io: Buffer): Error;

        static write(value: Error, io: Buffer): void;

        static isValid(value: Error): boolean;

        static toXDR(value: Error): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): Error;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): Error;

    }

    class StellarMessage {
        switch(): MessageType;

        error(value?: Error): Error;

        value(): Error;

        static errorMsg(value: Error): StellarMessage;

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static read(io: Buffer): StellarMessage;

        static write(value: StellarMessage, io: Buffer): void;

        static isValid(value: StellarMessage): boolean;

        static toXDR(value: StellarMessage): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): StellarMessage;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): StellarMessage;

    }

    class PaymentResult {
        switch(): PaymentResultCode;

        toXDR(format?: \\"raw\\"): Buffer;

        toXDR(format: \\"hex\\" | \\"base64\\"): string;

        static read(io: Buffer): PaymentResult;

        static write(value: PaymentResult, io: Buffer): void;

        static isValid(value: PaymentResult): boolean;

        static toXDR(value: PaymentResult): Buffer;

        static fromXDR(input: Buffer, format?: \\"raw\\"): PaymentResult;

        static fromXDR(input: string, format: \\"hex\\" | \\"base64\\"): PaymentResult;

    }

}"
`;
