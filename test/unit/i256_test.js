// import { XdrWriter, XdrReader } from '@stellar/js-xdr';
const I256 = StellarBase.Int256; // shorthand

describe('I256.isValid', function () {
  it('returns true for I256 instances', function () {
    expect(I256.isValid(I256.MIN_VALUE)).to.be.true;
    expect(I256.isValid(I256.MAX_VALUE)).to.be.true;
    expect(I256.isValid(I256.fromString('0'))).to.be.true;
    expect(I256.isValid(I256.fromString('-1'))).to.be.true;
    expect(I256.isValid(5n)).to.be.true;
  });

  it('returns false for non I256', function () {
    expect(I256.isValid(null)).to.be.false;
    expect(I256.isValid(undefined)).to.be.false;
    expect(I256.isValid([])).to.be.false;
    expect(I256.isValid({})).to.be.false;
    expect(I256.isValid(1)).to.be.false;
    expect(I256.isValid(true)).to.be.false;
  });
});

describe('I256.slice', function () {
  it('slices number to parts', function () {
    expect(
      new I256(
        -0x7fffffff800000005fffffffa00000003fffffffc00000001ffffffffn
      ).slice(32)
    ).to.be.eql([1n, -2n, 3n, -4n, 5n, -6n, 7n, -8n]);
    expect(
      new I256(
        -0x7fffffff800000005fffffffa00000003fffffffc00000001ffffffffn
      ).slice(64)
    ).to.be.eql([-0x1ffffffffn, -0x3fffffffdn, -0x5fffffffbn, -0x7fffffff9n]);
    expect(
      new I256(
        -0x7fffffff800000005fffffffa00000003fffffffc00000001ffffffffn
      ).slice(128)
    ).to.be.eql([-0x3fffffffc00000001ffffffffn, -0x7fffffff800000005fffffffbn]);
  });
});

describe('I256.fromString', function () {
  it('works for positive numbers', function () {
    expect(I256.fromString('1059').toString()).to.eql('1059');
  });

  it('works for negative numbers', function () {
    expect(
      I256.fromString('-105909234885029834059234850234985028304085').toString()
    ).to.eql('-105909234885029834059234850234985028304085');
  });

  it('fails when providing a string with a decimal place', function () {
    expect(() => I256.fromString('105946095601.5')).to.throw(/bigint-like/);
  });
});

/*
describe('Int256.read', function () {
  it('decodes correctly', function () {
    expect(read([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])).to.eql(new I256(0));
    expect(read([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01])).to.eql(new I256(1));
    expect(read([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])).to.eql(new I256(-1));
    expect(read([0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])).to.eql(new I256(I256.MAX_VALUE));
    expect(read([0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])).to.eql(new I256(I256.MIN_VALUE));
  });

  function read(bytes) {
    let io = new XdrReader(bytes);
    return I256.read(io);
  }
});

describe('I256.write', function () {
  it('encodes correctly', function () {
    expect(write(new I256(0))).to.eql([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    expect(write(new I256(1))).to.eql([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]);
    expect(write(new I256(-1))).to.eql([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);
    expect(write(I256.MAX_VALUE)).to.eql([0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);
    expect(write(I256.MIN_VALUE)).to.eql([0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
  });

  function write(value) {
    let io = new XdrWriter(8);
    I256.write(value, io);
    return io.toArray();
  }
});
*/
